static Node KthLargestUsingMorrisTraversal(Node root, int k)  
{  
    Node curr = root;  
    Node Klargest = null;  
  
    // count variable to keep count of visited Nodes  
    int count = 0;  
  
    while (curr != null) 
    {  
        // if right child is NULL  
        if (curr.right == null)  
        {  
  
            // first increment count and check if count = k  
            if (++count == k)  
                Klargest = curr;  
  
            // otherwise move to the left child  
            curr = curr.left;  
        }  
  
        else 
        {  
  
            // find inorder successor of current Node  
            Node succ = curr.right;  
  
            while (succ.left != null && succ.left != curr)  
                succ = succ.left;  
  
            if (succ.left == null) 
            {  
  
                // set left child of successor to the  
                // current Node  
                succ.left = curr;  
  
                // move current to its right  
                curr = curr.right;  
            }  
  
            // restoring the tree back to original binary  
            // search tree removing threaded links  
            else
            {  
  
                succ.left = null;  
  
                if (++count == k)  
                    Klargest = curr;  
  
                // move current to its left child  
                curr = curr.left;  
            }  
        }  
    }  
    return Klargest;  
}  